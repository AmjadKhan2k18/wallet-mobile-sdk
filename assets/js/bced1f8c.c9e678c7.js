"use strict";(self.webpackChunkmobile_wallet_protocol=self.webpackChunkmobile_wallet_protocol||[]).push([[150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={},o="Messages",l={unversionedId:"spec/messages",id:"spec/messages",title:"Messages",description:"Communications between client and server (wallet host) in MWP are through exchanging discrete stateless messages.",source:"@site/docs/spec/messages.md",sourceDirName:"spec",slug:"/spec/messages",permalink:"/wallet-mobile-sdk/docs/spec/messages",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"spec",previous:{title:"Overview",permalink:"/wallet-mobile-sdk/docs/spec"},next:{title:"Example",permalink:"/wallet-mobile-sdk/docs/spec/messages-example"}},i={},c=[{value:"Forms",id:"forms",level:2},{value:"Data form",id:"data-form",level:3},{value:"URL form",id:"url-form",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>uuid</code>",id:"uuid",level:3},{value:"<code>sender</code>",id:"sender",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"<code>version</code>",id:"version",level:3},{value:"<code>callback</code>",id:"callback",level:3},{value:"Contents",id:"contents",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"messages"},"Messages"),(0,a.kt)("p",null,"Communications between client and server (wallet host) in MWP are through exchanging discrete stateless messages."),(0,a.kt)("p",null,"The messages sent by the client app are called requests and the ones returned by the wallet host are called responses."),(0,a.kt)("h2",{id:"forms"},"Forms"),(0,a.kt)("p",null,"MWP messages can be transformed between two types according to their use cases."),(0,a.kt)("h3",{id:"data-form"},"Data form"),(0,a.kt)("p",null,"JSON object or corresponding data type in the language in use (e.g. Swift ",(0,a.kt)("inlineCode",{parentName:"p"},"struct"),", Kotlin ",(0,a.kt)("inlineCode",{parentName:"p"},"data class"),", or JavaScript object)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "uuid" : "634A5C15-0316-4FD1-86FB-4818DBD6C12D",\n  "sender" : "bwf9U+VbjmvfBr3p3aoJyOEKS6mq7sSrg56V6FDYMBs=",\n  "content" : {...},\n  "version" : "1.0.0",\n  "timestamp" : "1667475279"\n}\n')),(0,a.kt)("h3",{id:"url-form"},"URL form"),(0,a.kt)("p",null,"Deep link URL specifying recipient's address and base64 encoded ",(0,a.kt)("a",{parentName:"p",href:"#data-form"},"JSON object")," as query parameter"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"https://wallet.coinbase.com/wsegue?p=eyJ2ZXJzaW...U2RTMyQiJ9")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"uuid"},(0,a.kt)("inlineCode",{parentName:"h3"},"uuid")),(0,a.kt)("p",null,"Unique id of the message"),(0,a.kt)("h3",{id:"sender"},(0,a.kt)("inlineCode",{parentName:"h3"},"sender")),(0,a.kt)("p",null,"Public key of the sender in base64 encoded string"),(0,a.kt)("h3",{id:"content"},(0,a.kt)("inlineCode",{parentName:"h3"},"content")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#contents"},"Message's content")," which might be encrypted by the sender using the derived shared secret"),(0,a.kt)("h3",{id:"timestamp"},(0,a.kt)("inlineCode",{parentName:"h3"},"timestamp")),(0,a.kt)("p",null,"UNIX millisecond timestamp"),(0,a.kt)("h3",{id:"version"},(0,a.kt)("inlineCode",{parentName:"h3"},"version")),(0,a.kt)("p",null,"Version of the protocol used by the sender"),(0,a.kt)("h3",{id:"callback"},(0,a.kt)("inlineCode",{parentName:"h3"},"callback")),(0,a.kt)("p",null,"(Optional) sender's callback URL"),(0,a.kt)("h2",{id:"contents"},"Contents"),(0,a.kt)("p",null,"Each ",(0,a.kt)("inlineCode",{parentName:"p"},"Message")," contains its content under ",(0,a.kt)("inlineCode",{parentName:"p"},"content")," property.\nThe content data are encrypted using the shared secret between the sender and receiver so that it can be read only by the peers, except handshake calls to exchange keys and some failure responses happening during the handshake processes."))}d.isMDXComponent=!0}}]);