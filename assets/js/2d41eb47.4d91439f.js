"use strict";(self.webpackChunkmobile_wallet_protocol=self.webpackChunkmobile_wallet_protocol||[]).push([[953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),b=i,m=d["".concat(c,".").concat(b)]||d[b]||u[b]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={title:"Establishing a connection",slug:"rn-establishing-a-connection",category:"633d1d37bc7103008654c123"},a=void 0,l={unversionedId:"client-sdk/rn-establishing-a-connection",id:"client-sdk/rn-establishing-a-connection",title:"Establishing a connection",description:"A connection to Coinbase Wallet can be initiated using the provided EIP-1193 compliant provider exported by the Mobile SDK. Making an eth_requestAccounts request using the provider will automatically initiate a handshake request with Coinbase Wallet.",source:"@site/docs/client-sdk/rn-establishing-a-connection.md",sourceDirName:"client-sdk",slug:"/client-sdk/rn-establishing-a-connection",permalink:"/wallet-mobile-sdk/docs/client-sdk/rn-establishing-a-connection",draft:!1,tags:[],version:"current",frontMatter:{title:"Establishing a connection",slug:"rn-establishing-a-connection",category:"633d1d37bc7103008654c123"},sidebar:"clientSdk",previous:{title:"Setup",permalink:"/wallet-mobile-sdk/docs/client-sdk/rn-setup"},next:{title:"Making requests",permalink:"/wallet-mobile-sdk/docs/client-sdk/rn-making-requests"}},c={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A connection to Coinbase Wallet can be initiated using the provided ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"EIP-1193")," compliant provider exported by the Mobile SDK. Making an ",(0,i.kt)("inlineCode",{parentName:"p"},"eth_requestAccounts")," request using the provider will automatically initiate a handshake request with Coinbase Wallet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { WalletMobileSDKEVMProvider } from "@coinbase/wallet-mobile-sdk/build/WalletMobileSDKEVMProvider";\n\nconst provider = new WalletMobileSDKEVMProvider({\n  jsonRpcUrl: JSON_RPC_URL,\n});\n\nconst [address] = await provider.request({\n  method: "eth_requestAccounts",\n  params: [],\n});\n')))}u.isMDXComponent=!0}}]);